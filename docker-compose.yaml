name: assessment

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
    volumes:
      - ./zookeeper/data:/var/lib/zookeeper/data
      - ./zookeeper/log:/var/lib/zookeeper/log
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      interval: 5s
      timeout: 30s
      retries: 5
      start_period: 5s
    restart:
      on-failure

  kafka:
    image: confluentinc/cp-kafka:7.9.0
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "9094:9094"
      - "9999:9999"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9094,OUTSIDE://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9094,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: 0.0.0.0
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
      KAFKA_CREATE_TOPICS: "events.audittrail:3:1"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - ./kafka/data:/var/lib/kafka/data
      - ./kafka/log:/var/lib/kafka/log
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 5s
      timeout: 30s
      retries: 5
      start_period: 5s
    depends_on:
      zookeeper:
        condition: service_healthy
    restart:
      on-failure

  kafka-init:
    image: confluentinc/cp-kafka:7.9.0
    container_name: kafka-init
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:9094 --list
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9094 --create --if-not-exists --topic events.raw --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:9094 --list
      "
    depends_on:
      kafka:
        condition: service_healthy
    restart:
      none

  kafka-ui:
    image: ghcr.io/kafbat/kafka-ui:latest
    hostname: kafka-ui
    container_name: kafka-ui
    ports:
      - 8081:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9094
      KAFKA_CLUSTERS_0_METRICS_PORT: 9999
      DYNAMIC_CONFIG_ENABLED: 'true'
      KAFKA_CLUSTERS_0_AUDIT_TOPICAUDITENABLED: 'true'
      KAFKA_CLUSTERS_0_AUDIT_CONSOLEAUDITENABLED: 'true'
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "8080" ]
      interval: 5s
      timeout: 30s
      retries: 5
      start_period: 5s
    depends_on:
      kafka:
        condition: service_healthy
    restart:
      on-failure

  clickhouse:
    image: clickhouse/clickhouse-server:25.4.1.2934
    hostname: clickhouse
    container_name: clickhouse
    ports:
      - "8123:8123"   # HTTP port
      - "9000:9000"   # Native protocol port
      - "9009:9009"   # Port for interserver communication
    environment:
      - CLICKHOUSE_DB=default
      - CLICKHOUSE_USER=default
      - CLICKHOUSE_PASSWORD=default
      - CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1
    volumes:
      - ./clickhouse/data:/var/lib/clickhouse
      - ./clickhouse/logs:/var/log/clickhouse-server
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping" ]
      interval: 5s
      timeout: 30s
      retries: 5
      start_period: 5s
    restart:
      on-failure

  clickhouse-ui:
    image: spoonest/clickhouse-tabix-web-client:latest
    hostname: clickhouse-ui
    container_name: clickhouse-ui
    ports:
      - "8082:80"
    depends_on:
      clickhouse:
        condition: service_healthy

  load-balancer:
    image: nginx:latest
    hostname: load-balancer
    container_name: load-balancer
    ports:
      - 8080:8080
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 5s
      timeout: 30s
      retries: 5
      start_period: 5s
    restart:
      on-failure

  ingestion:
    image: ingestion:latest
    hostname: ingestion
    container_name: ingestion

  query:
    image: query:latest
    hostname: query
    container_name: query
